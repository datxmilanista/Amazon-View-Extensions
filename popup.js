document.addEventListener('DOMContentLoaded', () => {
    // --- L·∫•y t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ tr√™n giao di·ªán ---
    const amazonSiteSelect = document.getElementById("amazon-site");
    const userProfileSelect = document.getElementById("user-profile");
    const profileDescription = document.getElementById("profile-description");
    const categorySelect = document.getElementById("category");
    const loopsInput = document.getElementById("loops");
    const statusDiv = document.getElementById("status");
    const countdownDiv = document.getElementById("countdown");
    const loopCounterDiv = document.getElementById("loop-counter");
    const sessionTimerDiv = document.getElementById("session-timer");
    const startBtn = document.getElementById("start");
    const stopBtn = document.getElementById("stop");

    // Bi·∫øn ƒë·ªÉ qu·∫£n l√Ω b·ªô ƒë·∫øm gi·ªù
    let timerInterval = null;

    // --- D·ªØ li·ªáu m√¥ t·∫£ cho c√°c Profile ---
    const profileDescriptions = {
        researcher: "H√†nh vi k·ªπ t√≠nh: ∆Øu ti√™n s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng, d√†nh nhi·ªÅu th·ªùi gian xem x√©t, c√≥ kh·∫£ nƒÉng xem review v√† th√™m v√†o gi·ªè h√†ng cao.",
        normal: "H√†nh vi c√¢n b·∫±ng: T·ªëc ƒë·ªô v√† t∆∞∆°ng t√°c ·ªü m·ª©c v·ª´a ph·∫£i, m√¥ ph·ªèng ng∆∞·ªùi d√πng ph·ªï th√¥ng nh·∫•t.",
        fast_shopper: "H√†nh vi nhanh g·ªçn: L∆∞·ªõt xem r·∫•t nhanh, √≠t t∆∞∆°ng t√°c s√¢u, m√¥ ph·ªèng ng∆∞·ªùi d√πng ƒë√£ bi·∫øt r√µ m√¨nh mu·ªën mua g√¨."
    };

    // --- X·ª≠ l√Ω c√°c s·ª± ki·ªán c·ªßa ng∆∞·ªùi d√πng ---
    amazonSiteSelect.addEventListener("change", () => {
        chrome.storage.local.set({ siteKey: amazonSiteSelect.value });
    });
    
    userProfileSelect.addEventListener("change", () => {
        const selectedProfile = userProfileSelect.value;
        profileDescription.textContent = profileDescriptions[selectedProfile];
        chrome.storage.local.set({ userProfile: selectedProfile });
    });

    startBtn.addEventListener("click", () => {
        const siteKey = amazonSiteSelect.value;
        const categoryKey = categorySelect.value;
        const loops = parseInt(loopsInput.value, 10);
        const userProfile = userProfileSelect.value;
        chrome.runtime.sendMessage({ command: "start", siteKey, categoryKey, loops, userProfile });
    });

    stopBtn.addEventListener("click", () => {
        chrome.runtime.sendMessage({ command: "stop" });
    });
    
    // --- C√°c h√†m c·∫≠p nh·∫≠t giao di·ªán ---

    // H√†m ƒë·ªãnh d·∫°ng th·ªùi gian t·ª´ gi√¢y sang MM:SS
    function formatTime(totalSeconds) {
        if (totalSeconds < 0) totalSeconds = 0;
        const minutes = Math.floor(totalSeconds / 60);
        const seconds = totalSeconds % 60;
        return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }

    // H√†m qu·∫£n l√Ω v√† c·∫≠p nh·∫≠t t·∫•t c·∫£ c√°c b·ªô ƒë·∫øm gi·ªù
    function startAndManageTimers(data) {
        if (timerInterval) clearInterval(timerInterval);

        timerInterval = setInterval(() => {
            if (!data.isRunning) {
                clearInterval(timerInterval);
                return;
            }
            
            // C·∫≠p nh·∫≠t t·ªïng th·ªùi gian phi√™n
            if (data.sessionStartTime) {
                const elapsed = Math.round((Date.now() - data.sessionStartTime) / 1000);
                sessionTimerDiv.textContent = `Th·ªùi gian phi√™n: ${formatTime(elapsed)}`;
            }
            
            // C·∫≠p nh·∫≠t ƒë·ªìng h·ªì ƒë·∫øm ng∆∞·ª£c
            if (data.scrollEndTime && data.scrollEndTime > Date.now()) {
                const timeLeft = Math.round((data.scrollEndTime - Date.now()) / 1000);
                countdownDiv.textContent = formatTime(timeLeft);
            }
        }, 1000);
    }

    // H√†m ch√≠nh, c·∫≠p nh·∫≠t to√†n b·ªô giao di·ªán d·ª±a tr√™n tr·∫°ng th√°i
    function updateUI(data) {
        // C·∫≠p nh·∫≠t c√°c l·ª±a ch·ªçn t·ª´ storage
        if (data.siteKey) amazonSiteSelect.value = data.siteKey;
        if (data.categoryKey) categorySelect.value = data.categoryKey;
        if (data.userProfile) {
            userProfileSelect.value = data.userProfile;
            profileDescription.textContent = profileDescriptions[data.userProfile];
        } else {
            const defaultProfile = userProfileSelect.value;
            profileDescription.textContent = profileDescriptions[defaultProfile];
        }
        loopsInput.value = data.loops || 10;
        
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ch·∫°y/d·ª´ng
        startBtn.disabled = data.isRunning;
        stopBtn.disabled = !data.isRunning;
        sessionTimerDiv.textContent = data.isRunning ? 'B·∫Øt ƒë·∫ßu phi√™n...' : '';
        
        if (data.isRunning) {
            statusDiv.textContent = data.status || '...';
            statusDiv.classList.add('running');
            startAndManageTimers(data);
            
            // Hi·ªÉn th·ªã/·∫©n countdown v√† b·ªô ƒë·∫øm v√≤ng l·∫∑p
            if (data.scrollEndTime && data.scrollEndTime > Date.now()) {
                countdownDiv.style.display = 'block';
                loopCounterDiv.style.display = 'block';
                loopCounterDiv.textContent = `(${data.currentLoop + 1}/${data.loops})`;
            } else {
                countdownDiv.style.display = 'none';
                loopCounterDiv.style.display = 'none';
            }
        } else {
            statusDiv.textContent = data.status || 'üí§ S·∫µn s√†ng ƒë·ªÉ b·∫Øt ƒë·∫ßu.';
            statusDiv.classList.remove('running');
            countdownDiv.style.display = 'none';
            loopCounterDiv.style.display = 'none';
            if (timerInterval) clearInterval(timerInterval);
        }
    }
    
    // --- Kh·ªüi t·∫°o v√† l·∫Øng nghe thay ƒë·ªïi ---
    const keysToGet = ['status', 'categoryKey', 'loops', 'isRunning', 'scrollEndTime', 'userProfile', 'siteKey', 'sessionStartTime', 'currentLoop'];
    
    // L·∫•y d·ªØ li·ªáu l·∫ßn ƒë·∫ßu khi m·ªü popup
    chrome.storage.local.get(keysToGet, (data) => {
        updateUI(data);
    });
    
    // L·∫Øng nghe c√°c thay ƒë·ªïi t·ª´ background ƒë·ªÉ c·∫≠p nh·∫≠t UI real-time
    chrome.storage.onChanged.addListener(() => {
        chrome.storage.local.get(keysToGet, (data) => {
            updateUI(data);
        });
    });
});